[{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/articles/knowledge-base.html","id":"loading-the-workspace","dir":"Articles","previous_headings":"","what":"Loading the workspace","title":"Knowledge base","text":"Saving RStudio workspace (default option RStudio exit) save R6 objects, pointers .NET objects lost. Trying access objects loading workspace result error. currently workaround saving .NET objects.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/articles/knowledge-base.html","id":"data-type-conversion","dir":"Articles","previous_headings":"","what":"Data type conversion","title":"Knowledge base","text":"NA concept marking “missing values” R available .NET. might appear conterintuitive NA type “logical” interpreted TRUE sent .NET. Attention payed sending NA .NET methods. signature .NET method require integer argument, must passed integer using .integer() R. R assumes numerics doubles default, cause error passed method expects integer. Objects R vectors, single values just particular case vectors length one. .NET, scalar values arrays different types. current implementation, R vector length >1 translated array .NET, length one becomes scalar value. might lead problems calling .NET methods expecting array passing vector 1. trying pass vector containing NULL R .NET, NULL removed vector. R treats NULL vectors. E.g., trying call .NET method argument expects array doubles vector c(0, NULL, 3) result call c(0, 3). order correctly pass NULL .NET, passed list: list(0, NULL, 3).","code":""},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/articles/user-guide.html","id":"basic-data-types","dir":"Articles","previous_headings":"Data type conversion","what":"Basic data types","title":"User guide","text":"rSharp allows call public static methods implemented .NET assemblies pass data methods. return, calls often result data returned. obvious natural conversion R .NET data types, R values can easily passed , return value can interpreted native R type. basic modes R (character,numeric,integer, logical, vectors) equivalents .NET.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/articles/user-guide.html","id":"object-pointers-and-the-netobject-class","dir":"Articles","previous_headings":"Data type conversion","what":"Object pointers and the NetObject class","title":"User guide","text":"common .NET method returns another object can directly converted native R type. cases, method returns external pointer .NET object. NetObject class used represent pointers R. NetObject class R6 object wraps external pointer provides methods interact .NET object semantics familiar object-oriented programming. cases, user prefer interact objects NetObject. , reason, user needs access raw pointer, can done accessing field $pointer R6 object. NetObject instances can passed .NET methods arguments.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/articles/user-guide.html","id":"loading-an-assembly","dir":"Articles","previous_headings":"","what":"Loading an assembly","title":"User guide","text":"start working .NET assembly, need load R session. done using rSharp::loadAssembly function. example, use library rSharp.Examples.dll provided package. can get list loaded assemblies using getLoadedAssemblies function:","code":"library(rSharp) assembly <- loadAssembly(system.file(\"extdata\", \"rSharp.Examples.dll\", package = \"rSharp\")) getLoadedAssemblies() #>  [1] \"System.Private.CoreLib\"                     #>  [2] \"ClrFacade\"                                  #>  [3] \"System.Runtime\"                             #>  [4] \"System.Runtime.InteropServices\"             #>  [5] \"System.Console\"                             #>  [6] \"System.Linq\"                                #>  [7] \"System.Collections\"                         #>  [8] \"RDotNet\"                                    #>  [9] \"netstandard\"                                #> [10] \"System.Linq.Expressions\"                    #> [11] \"DynamicInterop\"                             #> [12] \"Microsoft.Win32.Primitives\"                 #> [13] \"System.Diagnostics.Process\"                 #> [14] \"System.ComponentModel.Primitives\"           #> [15] \"System.Threading\"                           #> [16] \"System.IO.Pipes\"                            #> [17] \"System.Net.Primitives\"                      #> [18] \"System.Net.Sockets\"                         #> [19] \"System.Threading.ThreadPool\"                #> [20] \"System.Threading.Thread\"                    #> [21] \"System.Collections.Concurrent\"              #> [22] \"System.Diagnostics.Tracing\"                 #> [23] \"System.Memory\"                              #> [24] \"System.Runtime.Numerics\"                    #> [25] \"rSharp.Examples\"                            #> [26] \"Microsoft.CSharp\"                           #> [27] \"System.Reflection.Emit.ILGeneration\"        #> [28] \"System.Reflection.Emit.Lightweight\"         #> [29] \"System.Reflection.Primitives\"               #> [30] \"Anonymously Hosted DynamicMethods Assembly\" # Check if a specific assembly is loaded isAssemblyLoaded(\"rSharp.Examples\") #> [1] TRUE"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/articles/user-guide.html","id":"working-with-static-members","dir":"Articles","previous_headings":"","what":"Working with static members","title":"User guide","text":"Static members .NET class can accessed without creating instance class. rSharp.Examples library implements class SampleStaticClass different static members. get overview available static members class, can use getStaticMembers function: explore methods, fields, properties class separately, can use getStaticMethods, getStaticFields, getStaticProperties functions, respectively. call static methods .NET class, can use rSharp::callStatic function. sure arguments expected certain method, can use getStaticMemberSignature function get method’s signature: method GetAString returns string arguments, can call using callStatic function: method arguments, can passed additional arguments callStatic function, case calling static function Add() requires two integers arguments: Mind explicitly cast arguments integer, numeric values R double default. can also access static fields class using getStatic setStatic functions: static string returned method GetAString called earlier. can set value static field expect returned GetAString method:","code":"getStaticMembers(\"rSharp.Examples.SampleStaticClass\") #> $Methods #> [1] \"Add\"               \"GetAString\"        \"GetInstanceObject\" #>  #> $Fields #> [1] \"StaticString\" #>  #> $Properties #> character(0) # Get the signature of the GetAString method getStaticMemberSignature(\"rSharp.Examples.SampleStaticClass\", \"GetAString\") #> [1] \"Static, Method: String GetAString\" # Get the signature of the Add method getStaticMemberSignature(\"rSharp.Examples.SampleStaticClass\", \"Add\") #> [1] \"Static, Method: Int32 Add, Int32, Int32\" rSharp::callStatic(\"rSharp.Examples.SampleStaticClass\", \"GetAString\") #> [1] \"A string from static class\" rSharp::callStatic(\"rSharp.Examples.SampleStaticClass\", \"Add\", as.integer(1), as.integer(2)) #> [1] 3 # Get the value of the static field getStatic(\"rSharp.Examples.SampleStaticClass\", \"StaticString\") #> [1] \"A string from static class\" # Set the value of the static field setStatic(\"rSharp.Examples.SampleStaticClass\", \"StaticString\", \"New value\") # Get the value of the static field getStatic(\"rSharp.Examples.SampleStaticClass\", \"StaticString\") #> [1] \"New value\" # Call the GetAString method callStatic(\"rSharp.Examples.SampleStaticClass\", \"GetAString\") #> [1] \"New value\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/articles/user-guide.html","id":"working-with-objects","dir":"Articles","previous_headings":"","what":"Working with objects","title":"User guide","text":"far, passing basic data types arguments receiving basic data types return values. However, many cases, need work .NET objects. example, method GetInstanceObject returns instance SampleInstanceClass class. rSharp wraps objects NetObject class: R6 class NetObject holds pointer .NET object provides methods interact . Thus, constructor NetObject requires external pointer .NET object. pointer can created calling newPointerFromName function. constructor .NET class requires arguments, can passed additional arguments newPointerFromName function. can examine constructors class getConstructors function: SampleInstanceClass six different constructor signature. can create new pointer instance class calling constructor two double arguments create NetObject using pointer: conventient way creating NetObject new object calling newObjectFromName function: static classes, can examine methods, fields, properties object using getMethods, getFields, getProperties methods called object, respectively. non-static class can also static members, can listed using getStatic... functions: Setting getting non-static fields properties object done using set get methods, respectively: get set static fields, use functions getStatic setStatic. Finally, can call methods object using call method:","code":"# Call the SampleInstanceClass method instance <- callStatic(\"rSharp.Examples.SampleStaticClass\", \"GetInstanceObject\")  # Check the class of the returned object class(instance) #> [1] \"NetObject\" \"R6\"  # Get the type of the object instance$type #> [1] \"rSharp.Examples.SampleInstanceClass\" getConstructors(\"rSharp.Examples.SampleInstanceClass\") #> [1] \"Constructor: .ctor\"                               #> [2] \"Constructor: .ctor, Double\"                       #> [3] \"Constructor: .ctor, Double, Double\"               #> [4] \"Constructor: .ctor, Int32\"                        #> [5] \"Constructor: .ctor, Int32, Int32\"                 #> [6] \"Constructor: .ctor, Int32, Int32, Double, Double\" # Create a pointer to a .NET object pointer <- newPointerFromName(\"rSharp.Examples.SampleInstanceClass\", as.double(1), as.double(2)) # Wrap the pointer in a new NetObject newInstance <- NetObject$new(pointer) # Create a new instance of the SampleInstanceClass newInstance2 <- newObjectFromName(\"rSharp.Examples.SampleInstanceClass\", as.integer(1)) # Get the methods of the object newInstance$getMethods() #> [1] \"Equals\"      \"GetAString\"  \"GetHashCode\" \"GetType\"     \"ToString\" # Get the fields of the object newInstance$getFields() #> [1] \"FieldDoubleOne\"  \"FieldDoubleTwo\"  \"FieldIntegerOne\" \"FieldIntegerTwo\" # Get the properties of the object newInstance$getProperties() #> character(0) newInstance$getStaticFields() #> [1] \"StaticString\" # Get the value of the static field: newInstance$get(\"FieldDoubleOne\") #> [1] 1 # Change the value of the static field: newInstance$set(\"FieldDoubleOne\", 23) # Get the value of the static field: newInstance$get(\"FieldDoubleOne\") #> [1] 23 # Call the Add method newInstance$call(\"GetAString\") #> [1] \"A string from instance class\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Open Systems Pharmacology. Copyright holder. esqLABS. Funder. Pavel Balazki. Author, maintainer. Juri Solodenko. Author. Michael Sevestre. Author. Robert McIntosh. Author. Felix Mil. Author. Jean-Michel Perraud. Author. Ian Peter Du. Contributor.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balazki P, Solodenko J, Sevestre M, McIntosh R, Mil F, Perraud J (2025). rSharp: Accessing .NET R. R package version 1.1.2.9000, http://www.open-systems-pharmacology.org/rSharp/, https://github.com/Open-Systems-Pharmacology/rsharp/.","code":"@Manual{,   title = {rSharp: Accessing .NET from R},   author = {Pavel Balazki and Juri Solodenko and Michael Sevestre and Robert McIntosh and Felix Mil and Jean-Michel Perraud},   year = {2025},   note = {R package version 1.1.2.9000, http://www.open-systems-pharmacology.org/rSharp/},   url = {https://github.com/Open-Systems-Pharmacology/rsharp/}, }"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"rsharp","dir":"","previous_headings":"","what":"Accessing .NET from R","title":"Accessing .NET from R","text":"rSharp R package provides access .NET libraries R. allows create .NET objects, access fields, call methods. package based rClr package utilizes code base.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"important-notes","dir":"","previous_headings":"","what":"Important notes","title":"Accessing .NET from R","text":"rSharp provided precompiled binary files, currently binary package. package utilizes two code bases - R code exposed user, C++/C# code communicates .NET libraries. end user package interact R code, pre-build C++/C# libraries supplied package. See section Installation instructions install package. Advanced users C++/C# developers might want build C++/C# code source. , follow instructions section Build.","code":""},{"path":[]},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"prerequisites","dir":"","previous_headings":"Installation > Windows","what":"Prerequisites","title":"Accessing .NET from R","text":"Latest Microsoft Visual C++ Redistributable Visual Studio 2015, 2017 2019 available .NET 8 runtime available .","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"install-from-github","dir":"","previous_headings":"Installation > Windows","what":"Install from Github","title":"Accessing .NET from R","text":"can install package GitHub pre-build binaries running: Get latest development version :","code":"install.packages(\"pak\") pak::pak(\"Open-Systems-Pharmacology/rSharp@*release\") pak::pak(\"Open-Systems-Pharmacology/rSharp\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"install-from-binary","dir":"","previous_headings":"Installation > Windows","what":"Install from Binary","title":"Accessing .NET from R","text":"Alternatively, download attached binary file (.zip) latest release, install locally using:","code":"install.packages(\"path/to/rSharp_X.zip\",  type = \"win.binary\")"},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"prerequisites-1","dir":"","previous_headings":"Installation > MacOS","what":"Prerequisites","title":"Accessing .NET from R","text":".NET 8 runtime available (click macOS tab).","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"install-from-github-1","dir":"","previous_headings":"Installation > MacOS","what":"Install from Github","title":"Accessing .NET from R","text":"can install package GitHub pre-build binaries running: Get latest development version :","code":"install.packages(\"pak\") pak::pak(\"Open-Systems-Pharmacology/rSharp@*release\") pak::pak(\"Open-Systems-Pharmacology/rSharp\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"install-from-binary-1","dir":"","previous_headings":"Installation > MacOS","what":"Install from Binary","title":"Accessing .NET from R","text":"Alternatively, download attached binary file (.tgz) latest release, install locally using:","code":"install.packages(\"path/to/rSharp_X.tgz\")"},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"prerequisites-2","dir":"","previous_headings":"Installation > Ubuntu","what":"Prerequisites","title":"Accessing .NET from R","text":"Run following commands install required dependencies:","code":"sudo apt-get install dotnet-runtime-8.0 libcurl4-openssl-dev libssl-dev libxml2-dev  sudo apt-get install libfontconfig1-dev libharfbuzz-dev libfribidi-dev sudo apt-get install libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"install-from-github-2","dir":"","previous_headings":"Installation > Ubuntu","what":"Install from Github","title":"Accessing .NET from R","text":"can install package GitHub pre-build binaries running: Get latest development version :","code":"install.packages(\"pak\") pak::pak(\"Open-Systems-Pharmacology/rSharp@*release\") pak::pak(\"Open-Systems-Pharmacology/rSharp\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"install-from-binary-2","dir":"","previous_headings":"Installation > Ubuntu","what":"Install from Binary","title":"Accessing .NET from R","text":"Alternatively, download attached binary file (.tar.gz) latest release, install locally using:","code":"install.packages(\"path/to/rSharp_X.tar.gz\")"},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"windows-1","dir":"","previous_headings":"Build","what":"Windows","title":"Accessing .NET from R","text":"build C++/C# libraries source, make sure Desktop development C++ workload installed Visual Studio. Create environment variable R_INSTALL_PATH set value path R installed Start Visual Studio open rSharp.sln solution file build solution. build process automatically copy required files rSharp/inst/lib folder. start preferred R environment run following R commands within rSharp folder","code":"set R_INSTALL_PATH = \"C:\\Program Files\\R\\R-4.3.3\" devtools::install()"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"ubuntu-1","dir":"","previous_headings":"Build","what":"Ubuntu","title":"Accessing .NET from R","text":"Set .NET SDK nuget (latter get required dependencies) Optionally set build binaries Navigate rSharp\\shared directory run change back rSharp directory start preferred R environment run following R commands","code":"sudo apt-get install dotnet-sdk-8.0 sudo apt-get install nuget make devtools::install()"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"macos-1","dir":"","previous_headings":"Build","what":"MacOS","title":"Accessing .NET from R","text":"Download install .NET SDK 8 Install Homebrew use install build tools Navigate rSharp\\shared directory run change back rSharp directory start preferred R environment run following R commands","code":"brew install nuget brew install cmake brew install gcc make devtools::install()"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"user-guide","dir":"","previous_headings":"","what":"User guide","title":"Accessing .NET from R","text":"Examples interacting .NET assemblies using package detailed vignette('user-guide'). useful tips around using package available vignette('knowledge-base').","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Accessing .NET from R","text":"Everyone interacting Open Systems Pharmacology community (codebases, issue trackers, chat rooms, mailing lists etc…) expected follow Open Systems Pharmacology code conduct.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Accessing .NET from R","text":"encourage contribution Open Systems Pharmacology community. getting started please read contribution guidelines. contributing code, please familiar coding standards.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Accessing .NET from R","text":"rSharp package released GPLv2 License. trademarks within document belong legitimate owners.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":null,"dir":"Reference","previous_headings":"","what":"NetObject — NetObject","title":"NetObject — NetObject","text":"Base wrapper class pointers .NET objects. Offers basic methods interact .NET objects.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"NetObject — NetObject","text":"type String representation type .NET object. Read-pointer external pointer .NET object. Read-","code":""},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"NetObject — NetObject","text":"NetObject$new() NetObject$getFields() NetObject$getStaticFields() NetObject$getProperties() NetObject$getStaticProperties() NetObject$getMethods() NetObject$getStaticMethods() NetObject$getMemberSignature() NetObject$call() NetObject$get() NetObject$set() NetObject$.printLine() NetObject$.printClass() NetObject$print()","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"NetObject — NetObject","text":"Initializes object.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$new(pointer)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"pointer external pointer .NET object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"initialized object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- \"ClrFacade.Tests.RefClasses.LevelOneClass\" o <- .External(\"r_create_clr_object\", testClassName, PACKAGE = getRSharpSetting(\"nativePkgName\")) x <- newObjectFromName(testClassName) print(x)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-getfields-","dir":"Reference","previous_headings":"","what":"Method getFields()","title":"NetObject — NetObject","text":"List fields object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getFields(contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string field names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names fields object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getFields() testObj$getFields(\"ieldInt\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-getstaticfields-","dir":"Reference","previous_headings":"","what":"Method getStaticFields()","title":"NetObject — NetObject","text":"List static fields object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getStaticFields(contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string field names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names static fields object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getStaticFields() testObj$getStaticFields(\"ieldInt\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-getproperties-","dir":"Reference","previous_headings":"","what":"Method getProperties()","title":"NetObject — NetObject","text":"List properties object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getProperties(contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string property names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names properties object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getProperties() testObj$getProperties(\"One\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-getstaticproperties-","dir":"Reference","previous_headings":"","what":"Method getStaticProperties()","title":"NetObject — NetObject","text":"List static properties object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getStaticProperties(contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string property names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names static properties object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getStaticProperties() testObj$getStaticProperties(\"One\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-getmethods-","dir":"Reference","previous_headings":"","what":"Method getMethods()","title":"NetObject — NetObject","text":"List methods object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getMethods(contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string methods names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names methods object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMethods() testObj$getMethods(\"Get\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-getstaticmethods-","dir":"Reference","previous_headings":"","what":"Method getStaticMethods()","title":"NetObject — NetObject","text":"List static methods object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getStaticMethods(contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string methods names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names static methods object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getStaticMethods() testObj$getStaticMethods(\"Get\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-getmembersignature-","dir":"Reference","previous_headings":"","what":"Method getMemberSignature()","title":"NetObject — NetObject","text":"Gets string representation signature member (.e. field, property, method). Mostly used interactively search arguments pass method.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getMemberSignature(memberName)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"memberName exact name member (.e. field, property, method) search ","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"character vector summary information method/member signatures","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMemberSignature(\"set_PropertyIntegerOne\") testObj$getMemberSignature(\"FieldIntegerOne\") testObj$getMemberSignature(\"PropertyIntegerTwo\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-call-","dir":"Reference","previous_headings":"","what":"Method call()","title":"NetObject — NetObject","text":"Call method object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$call(methodName, ...)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"methodName name method object ... additional method arguments","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$call(\"GetFieldIntegerOne\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"NetObject — NetObject","text":"Gets value field property object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$get(name)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"name name field/property  object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$get(\"FieldIntegerOne\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-set-","dir":"Reference","previous_headings":"","what":"Method set()","title":"NetObject — NetObject","text":"Sets value field property object.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$set(name, value, asInteger = FALSE)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"name name field/property object value value set field asInteger Boolean whether convert value integer. Used cases .NET signature requires integer. Ignored `value` numeric.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$set(\"FieldIntegerOne\", as.integer(42))"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-printline-","dir":"Reference","previous_headings":"","what":"Method .printLine()","title":"NetObject — NetObject","text":"DEPRECATED: Internal method printing line","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$.printLine(entry, value = NULL, addTab = TRUE)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"entry entry text value value print addTab Whether add tab entry","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-printclass-","dir":"Reference","previous_headings":"","what":"Method .printClass()","title":"NetObject — NetObject","text":"DEPRECATED: Internal method printing class name","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$.printClass()"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"NetObject — NetObject","text":"Prints summary object.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$print()"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/NetObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"## ------------------------------------------------ ## Method `NetObject$new` ## ------------------------------------------------  testClassName <- \"ClrFacade.Tests.RefClasses.LevelOneClass\" o <- .External(\"r_create_clr_object\", testClassName, PACKAGE = getRSharpSetting(\"nativePkgName\")) x <- newObjectFromName(testClassName) print(x) #>  #> ── <NetObject> ── #>  #> Type: ClrFacade.Tests.RefClasses.LevelOneClass #>  #> ── Available Methods  #>   • `AbstractMethod()` #>   • `AbstractMethod()` #>   • `Equals()` #>   • `get_SomeInt()` #>   • `GetHashCode()` #>   • `GetType()` #>   • `ToString()` #>   • `VirtualMethod()` #>  #> ── Available Properties  #>   • SomeInt  ## ------------------------------------------------ ## Method `NetObject$getFields` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getFields() #> [1] \"FieldDoubleOne\"  \"FieldDoubleTwo\"  \"FieldIntegerOne\" \"FieldIntegerTwo\" #> [5] \"PublicInt\"       testObj$getFields(\"ieldInt\") #> [1] \"FieldIntegerOne\" \"FieldIntegerTwo\"  ## ------------------------------------------------ ## Method `NetObject$getStaticFields` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getStaticFields() #> [1] \"StaticFieldIntegerOne\" \"StaticFieldIntegerTwo\" \"StaticPublicInt\"       testObj$getStaticFields(\"ieldInt\") #> [1] \"StaticFieldIntegerOne\" \"StaticFieldIntegerTwo\"  ## ------------------------------------------------ ## Method `NetObject$getProperties` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getProperties() #> [1] \"PropertyIntegerOne\" \"PropertyIntegerTwo\" testObj$getProperties(\"One\") #> [1] \"PropertyIntegerOne\"  ## ------------------------------------------------ ## Method `NetObject$getStaticProperties` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getStaticProperties() #> [1] \"StaticPropertyIntegerOne\" \"StaticPropertyIntegerTwo\" testObj$getStaticProperties(\"One\") #> [1] \"StaticPropertyIntegerOne\"  ## ------------------------------------------------ ## Method `NetObject$getMethods` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMethods() #>  [1] \"Equals\"                  \"get_PropertyIntegerOne\"  #>  [3] \"get_PropertyIntegerTwo\"  \"GetFieldIntegerOne\"      #>  [5] \"GetFieldIntegerTwo\"      \"GetHashCode\"             #>  [7] \"GetMethodWithParameters\" \"GetPublicInt\"            #>  [9] \"GetType\"                 \"set_PropertyIntegerOne\"  #> [11] \"set_PropertyIntegerTwo\"  \"TestDefaultValues\"       #> [13] \"TestParams\"              \"ToString\"                testObj$getMethods(\"Get\") #> [1] \"GetFieldIntegerOne\"      \"GetFieldIntegerTwo\"      #> [3] \"GetHashCode\"             \"GetMethodWithParameters\" #> [5] \"GetPublicInt\"            \"GetType\"                  ## ------------------------------------------------ ## Method `NetObject$getStaticMethods` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getStaticMethods() #> [1] \"get_StaticPropertyIntegerOne\"  \"get_StaticPropertyIntegerTwo\"  #> [3] \"set_StaticPropertyIntegerOne\"  \"set_StaticPropertyIntegerTwo\"  #> [5] \"StaticGetFieldIntegerOne\"      \"StaticGetFieldIntegerTwo\"      #> [7] \"StaticGetMethodWithParameters\" \"StaticGetPublicInt\"            testObj$getStaticMethods(\"Get\") #> [1] \"StaticGetFieldIntegerOne\"      \"StaticGetFieldIntegerTwo\"      #> [3] \"StaticGetMethodWithParameters\" \"StaticGetPublicInt\"             ## ------------------------------------------------ ## Method `NetObject$getMemberSignature` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMemberSignature(\"set_PropertyIntegerOne\") #> [1] \"Method: Void set_PropertyIntegerOne, Int32\" testObj$getMemberSignature(\"FieldIntegerOne\") #> [1] \"Field FieldIntegerOne, Int32\" testObj$getMemberSignature(\"PropertyIntegerTwo\") #> [1] \"Property PropertyIntegerTwo, Int32, can write: True\"  ## ------------------------------------------------ ## Method `NetObject$call` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$call(\"GetFieldIntegerOne\") #> [1] 0  ## ------------------------------------------------ ## Method `NetObject$get` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$get(\"FieldIntegerOne\") #> [1] 0  ## ------------------------------------------------ ## Method `NetObject$set` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$set(\"FieldIntegerOne\", as.integer(42))"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/callStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Call a static method on a .NET type — callStatic","title":"Call a static method on a .NET type — callStatic","text":"Call static method .NET type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/callStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call a static method on a .NET type — callStatic","text":"","code":"callStatic(typename, methodName, ...)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/callStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call a static method on a .NET type — callStatic","text":"typename type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. methodName name static method type ... additional method arguments passed .External (e.g., arguments method)","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/callStatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call a static method on a .NET type — callStatic","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/callStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call a static method on a .NET type — callStatic","text":"","code":"cTypename <- getRSharpSetting(\"testCasesTypeName\") callStatic(cTypename, \"IsTrue\", TRUE) #> [1] TRUE"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/castToRObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create if possible an object of the R6 class `NetObject` — castToRObject","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"Create possible object R6 class `NetObject`","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/castToRObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"","code":"castToRObject(obj, recursive = TRUE)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/castToRObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"obj presumed external pointer. recursive logical; TRUE, function applied recursively list elements.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/castToRObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"`NetObject` R6 object argument indeed external pointer, otherwise returned unchanged. `recursive` TRUE `obj` list, function applied recursively list elements.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/castToRObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"Create possible adequate R6 object class `NetObject` wraps external pointer .NET object. `obj` pointer, returns `obj` unchanged.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/castToRObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"","code":"castToRObject(1) #> [1] 1 castToRObject(\"a\") #> [1] \"a\" castToRObject(TRUE) #> [1] TRUE castToRObject(FALSE) #> [1] FALSE castToRObject(1L) #> [1] 1 castToRObject(1.1) #> [1] 1.1 castToRObject(1.1 + 1i) #> [1] 1.1+1i castToRObject(list(1, 2, 3)) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  castToRObject(data.frame(a = 1:3, b = c(\"a\", \"b\", \"c\"))) #>   a b #> 1 1 a #> 2 2 b #> 3 3 c"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-clrTypeNameExtPtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the type name of an object — .clrTypeNameExtPtr","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"Gets type name object, given SEXP external pointer .NET object.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-clrTypeNameExtPtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"","code":".clrTypeNameExtPtr(extPtr)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-clrTypeNameExtPtr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"extPtr external pointer .NET object (`cobjRef` S4 `NetObject` object)","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-clrTypeNameExtPtr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"character string, type name","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-clrTypeNameExtPtr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"","code":"if (FALSE) { # \\dontrun{ testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) .clrTypeNameExtPtr(testObj$pointer) } # }"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-getCurrentConvertedObject.html","id":null,"dir":"Reference","previous_headings":"","what":"System function to get a direct access to an object — .getCurrentConvertedObject","title":"System function to get a direct access to an object — .getCurrentConvertedObject","text":"function highly unlikely use end user, even advanced one. indirectly needed unlock benefits using R.NET convert data structures R .NET.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-getCurrentConvertedObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System function to get a direct access to an object — .getCurrentConvertedObject","text":"","code":".getCurrentConvertedObject()"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-getCurrentConvertedObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System function to get a direct access to an object — .getCurrentConvertedObject","text":"`cobjRef` S4 object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-mkClrObjRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"Create possible adequate S4 object wraps external pointer `cobjRef` object.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-mkClrObjRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"","code":".mkClrObjRef(obj, clrtype = NULL)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-mkClrObjRef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"obj presumed external pointer. clrtype character; name type object. NULL, rSharp retrieves type name.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/dot-mkClrObjRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"cobjRef S4 object argument indeed external pointer, otherwise returned unchanged.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getConstructors.html","id":null,"dir":"Reference","previous_headings":"","what":"List the public constructors of a CLR Type — getConstructors","title":"List the public constructors of a CLR Type — getConstructors","text":"List public constructors CLR Type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getConstructors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the public constructors of a CLR Type — getConstructors","text":"","code":"getConstructors(type)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getConstructors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the public constructors of a CLR Type — getConstructors","text":"type .NET Type, (character) type name can successfully parsed","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getConstructors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the public constructors of a CLR Type — getConstructors","text":"list constructor signatures","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getConstructors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the public constructors of a CLR Type — getConstructors","text":"","code":"testClassName <- \"ClrFacade.TestObject\" getConstructors(testClassName) #> [1] \"Constructor: .ctor\"                               #> [2] \"Constructor: .ctor, Double\"                       #> [3] \"Constructor: .ctor, Double, Double\"               #> [4] \"Constructor: .ctor, Int32\"                        #> [5] \"Constructor: .ctor, Int32, Int32\"                 #> [6] \"Constructor: .ctor, Int32, Int32, Double, Double\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getEnumNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the names of a .NET Enum value type — getEnumNames","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"Gets names .NET Enum value type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getEnumNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"","code":"getEnumNames(enumType)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getEnumNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"enumType .NET object, System.Type type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getEnumNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"character vector names enum","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getEnumNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"","code":"enumName <- \"ClrFacade.TestEnum\" getEnumNames(enumName) #> [1] \"A\" \"B\" \"C\" # Get enum names from object enumObj <- newObjectFromName(enumName) getEnumNames(enumObj) #> [1] \"A\" \"B\" \"C\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getLoadedAssemblies.html","id":null,"dir":"Reference","previous_headings":"","what":"List the names of loaded assemblies — getLoadedAssemblies","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"List names loaded assemblies","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getLoadedAssemblies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"","code":"getLoadedAssemblies(fullname = FALSE, filenames = FALSE)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getLoadedAssemblies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"fullname full name assemblies returned. `FALSE` default. filenames TRUE, return data frame second column URI (usually file path) loaded assembly. `FALSE` default.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getLoadedAssemblies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"names loaded assemblies","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getLoadedAssemblies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"","code":"getLoadedAssemblies() #>  [1] \"System.Private.CoreLib\"                     #>  [2] \"ClrFacade\"                                  #>  [3] \"System.Runtime\"                             #>  [4] \"System.Runtime.InteropServices\"             #>  [5] \"System.Console\"                             #>  [6] \"System.Linq\"                                #>  [7] \"System.Collections\"                         #>  [8] \"RDotNet\"                                    #>  [9] \"netstandard\"                                #> [10] \"System.Linq.Expressions\"                    #> [11] \"DynamicInterop\"                             #> [12] \"Microsoft.Win32.Primitives\"                 #> [13] \"System.Diagnostics.Process\"                 #> [14] \"System.ComponentModel.Primitives\"           #> [15] \"System.Threading\"                           #> [16] \"System.IO.Pipes\"                            #> [17] \"System.Net.Primitives\"                      #> [18] \"System.Net.Sockets\"                         #> [19] \"System.Threading.ThreadPool\"                #> [20] \"System.Threading.Thread\"                    #> [21] \"System.Collections.Concurrent\"              #> [22] \"System.Diagnostics.Tracing\"                 #> [23] \"System.Memory\"                              #> [24] \"System.Runtime.Numerics\"                    #> [25] \"Microsoft.CSharp\"                           #> [26] \"System.Reflection.Emit.ILGeneration\"        #> [27] \"System.Reflection.Emit.Lightweight\"         #> [28] \"System.Reflection.Primitives\"               #> [29] \"Anonymously Hosted DynamicMethods Assembly\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getRSharpSetting.html","id":null,"dir":"Reference","previous_headings":"","what":"getRSharpSetting — getRSharpSetting","title":"getRSharpSetting — getRSharpSetting","text":"Get value global rSharp setting.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getRSharpSetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getRSharpSetting — getRSharpSetting","text":"","code":"getRSharpSetting(settingName)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getRSharpSetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getRSharpSetting — getRSharpSetting","text":"settingName String name setting","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getRSharpSetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getRSharpSetting — getRSharpSetting","text":"Value setting stored rSharpEnv. setting exist, error thrown.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getRSharpSetting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getRSharpSetting — getRSharpSetting","text":"","code":"getRSharpSetting(\"nativePkgName\") #> [1] \"rSharp.linux\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getSexpType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the type code for a SEXP — getSexpType","title":"Get the type code for a SEXP — getSexpType","text":"Get type code SEXP, returned TYPEOF macro","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getSexpType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the type code for a SEXP — getSexpType","text":"","code":"getSexpType(sexp)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getSexpType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the type code for a SEXP — getSexpType","text":"sexp R object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getSexpType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the type code for a SEXP — getSexpType","text":"type code, integer, defined Rinternals.h","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getSexpType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the type code for a SEXP — getSexpType","text":"","code":"getSexpType(1) #> [1] 14 getSexpType(\"a\") #> [1] 16 getSexpType(1:10) #> [1] 13"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the value of a static field or property of a class — getStatic","title":"Gets the value of a static field or property of a class — getStatic","text":"Gets value static field property class","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the value of a static field or property of a class — getStatic","text":"","code":"getStatic(type, name)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the value of a static field or property of a class — getStatic","text":"type Type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. name name field/property  object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the value of a static field or property of a class — getStatic","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the value of a static field or property of a class — getStatic","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") getStatic(testClassName, \"StaticPropertyIntegerOne\") #> [1] 0"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static fields for a type — getStaticFields","title":"Gets the static fields for a type — getStaticFields","text":"Gets static fields type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static fields for a type — getStaticFields","text":"","code":"getStaticFields(objOrType, contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static fields for a type — getStaticFields","text":"objOrType `NetObject` object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. contains string property names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMemberSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the signature of a static member of a type — getStaticMemberSignature","title":"Gets the signature of a static member of a type — getStaticMemberSignature","text":"Gets signature static member type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMemberSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the signature of a static member of a type — getStaticMemberSignature","text":"","code":"getStaticMemberSignature(typename, memberName)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMemberSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the signature of a static member of a type — getStaticMemberSignature","text":"typename type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. memberName exact name member (.e. field, property, method) search ","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMembers.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static members for a type — getStaticMembers","title":"Gets the static members for a type — getStaticMembers","text":"Gets static members type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMembers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static members for a type — getStaticMembers","text":"","code":"getStaticMembers(objOrType)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMembers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static members for a type — getStaticMembers","text":"objOrType .NET object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMembers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the static members for a type — getStaticMembers","text":"","code":"cTypename <- getRSharpSetting(\"testCasesTypeName\") getStaticMembers(cTypename) #> $Methods #>  [1] \"CallGC\"                            \"CheckIsDailySequence\"              #>  [3] \"ComplexEquals\"                     \"ComplexEquals\"                     #>  [5] \"ConvertTime\"                       \"CreateArrayMemFootprint\"           #>  [7] \"CreateComplex\"                     \"CreateComplex\"                     #>  [9] \"CreateDate\"                        \"CreateDateArray\"                   #> [11] \"CreateDateArraySeconds\"            \"CreateDouble\"                      #> [13] \"CreateEmptyArray\"                  \"CreateEmptyArrayBool\"              #> [15] \"CreateEmptyArrayByte\"              \"CreateEmptyArrayDouble\"            #> [17] \"CreateEmptyArrayFloat\"             \"CreateEmptyArrayInt\"               #> [19] \"CreateEmptyArrayLong\"              \"CreateEmptyArrayString\"            #> [21] \"CreateException\"                   \"CreateFloat\"                       #> [23] \"CreateFloatArray\"                  \"CreateInnerExceptions\"             #> [25] \"CreateInt\"                         \"CreateIntArray\"                    #> [27] \"CreateJaggedDoubleArray\"           \"CreateJaggedFloatArray\"            #> [29] \"CreateLong\"                        \"CreateMemTestObj\"                  #> [31] \"CreateNumArray\"                    \"CreateNumArrayMissingVal\"          #> [33] \"CreateObjectDictionary\"            \"CreateRectDoubleArray\"             #> [35] \"CreateRectFloatArray\"              \"CreateString\"                      #> [37] \"CreateStringArray\"                 \"CreateStringDictionary\"            #> [39] \"CreateStringDoubleArrayDictionary\" \"CreateTestArrayGenericInterface\"   #> [41] \"CreateTestArrayGenericObjects\"     \"CreateTestArrayInterface\"          #> [43] \"CreateTestDataFrame\"               \"CreateTestNumericVector\"           #> [45] \"CreateTestObject\"                  \"CreateTestObjectGenericInstance\"   #> [47] \"CreateTimeSpanArray\"               \"DateEquals\"                        #> [49] \"DateEquals\"                        \"DateEquals\"                        #> [51] \"DoubleEquals\"                      \"GetComplexDataCase\"                #> [53] \"GetComplexDataTypeName\"            \"GetExceptionMessage\"               #> [55] \"GetFalse\"                          \"GetMemTestObjCounter\"              #> [57] \"GetNaN\"                            \"GetNaNArray\"                       #> [59] \"GetNull\"                           \"GetNullArray\"                      #> [61] \"GetNumComplexDataCases\"            \"GetPrivateMemoryMegabytes\"         #> [63] \"GetRFunctionInvoke\"                \"GetTestEnum\"                       #> [65] \"GetTrue\"                           \"GetWorkingSetMemoryMegabytes\"      #> [67] \"IntEquals\"                         \"IsNA\"                              #> [69] \"IsNaN\"                             \"IsNaNInArray\"                      #> [71] \"IsNull\"                            \"IsNullInArray\"                     #> [73] \"IsTrue\"                            \"NumArrayEquals\"                    #> [75] \"NumArrayMissingValuesEquals\"       \"NumericMatrixEquals\"               #> [77] \"SinkDateTime\"                      \"SinkLargeObject\"                   #> [79] \"StringArrayEquals\"                 \"StringArrayMissingValuesEquals\"    #> [81] \"StringEquals\"                      \"ThrowException\"                    #> [83] \"TimeSpanEquals\"                    \"TimeZoneToLocalDate\"               #> [85] \"UtcDateEquals\"                     \"UtcDateEquals\"                     #> [87] \"UtcDateForTimeZone\"                \"UtcDateForTimeZone\"                #>  #> $Fields #> character(0) #>  #> $Properties #> character(0) #>"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static methods for a type — getStaticMethods","title":"Gets the static methods for a type — getStaticMethods","text":"Gets static methods type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static methods for a type — getStaticMethods","text":"","code":"getStaticMethods(objOrType, contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticMethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static methods for a type — getStaticMethods","text":"objOrType `NetObject` object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. contains string property names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticProperties.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static properties for a type — getStaticProperties","title":"Gets the static properties for a type — getStaticProperties","text":"Gets static properties type","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticProperties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static properties for a type — getStaticProperties","text":"","code":"getStaticProperties(objOrType, contains = \"\")"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getStaticProperties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static properties for a type — getStaticProperties","text":"objOrType `NetObject` object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. contains string property names returned must contain","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getType.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"Returns `NetObject` object external pointer object type `System.RuntimeType` represents type .NET object. get string representation type, call `toStringNET` returned object.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"","code":"getType(objOrTypename)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"objOrTypename object class `NEtObject` character vector length one. can full file name assembly load, fully qualified assembly name, last resort partial name.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"`NetObject` pointer `System.RuntimeType` `objOrTypename`.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"","code":"testClassName <- \"ClrFacade.TestObject\" type <- getType(testClassName) toStringNET(type) #> [1] \"ClrFacade.TestObject\"  testObj <- newObjectFromName(testClassName) type <- getType(testObj) toStringNET(type) #> [1] \"ClrFacade.TestObject\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getTypesInAssembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"Get list .NET type names exported assembly","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getTypesInAssembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"","code":"getTypesInAssembly(assemblyName)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getTypesInAssembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"assemblyName name assembly","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getTypesInAssembly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"names types exported assembly","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/getTypesInAssembly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"","code":"getTypesInAssembly(\"ClrFacade\") #>  [1] \"ClrFacade.ClrFacade\"                                      #>  [2] \"ClrFacade.ClrObjectToSexpDelegate\"                        #>  [3] \"ClrFacade.IUnmanagedDll\"                                  #>  [4] \"ClrFacade.DataConversionHelper\"                           #>  [5] \"ClrFacade.SymbolicExpressionWrapper\"                      #>  [6] \"ClrFacade.DataConverterExtensions\"                        #>  [7] \"ClrFacade.HelloWorld\"                                     #>  [8] \"ClrFacade.IDataConverter\"                                 #>  [9] \"ClrFacade.InternalReflectionHelper\"                       #> [10] \"ClrFacade.InternalRSharpFacade\"                           #> [11] \"ClrFacade.PerformanceProfiling\"                           #> [12] \"ClrFacade.RdotnetDataConverterTests\"                      #> [13] \"ClrFacade.RSharpValueType\"                                #> [14] \"ClrFacade.RSharpGenericValueExtensions\"                   #> [15] \"ClrFacade.RSharpGenericValue\"                             #> [16] \"ClrFacade.RSharpUnmanagedDll\"                             #> [17] \"ClrFacade.TestArrayMemoryHandling\"                        #> [18] \"ClrFacade.TestCases\"                                      #> [19] \"ClrFacade.TestObjectWithEnum\"                             #> [20] \"ClrFacade.ITestInterface\"                                 #> [21] \"ClrFacade.ITestGenericInterface`1\"                        #> [22] \"ClrFacade.TestEnum\"                                       #> [23] \"ClrFacade.TestFlagEnum\"                                   #> [24] \"ClrFacade.TestObjectGeneric`1\"                            #> [25] \"ClrFacade.TestObject\"                                     #> [26] \"ClrFacade.TestMethodBinding\"                              #> [27] \"ClrFacade.ITestMethodBindings\"                            #> [28] \"ClrFacade.Tests.TestUtilities\"                            #> [29] \"ClrFacade.Tests.RefClasses.BaseAbstractClassOne\"          #> [30] \"ClrFacade.Tests.RefClasses.InterfaceOne\"                  #> [31] \"ClrFacade.Tests.RefClasses.InterfaceBaseTwo\"              #> [32] \"ClrFacade.Tests.RefClasses.InterfaceBaseOne\"              #> [33] \"ClrFacade.Tests.RefClasses.InterfaceTwo\"                  #> [34] \"ClrFacade.Tests.RefClasses.LevelOneClass\"                 #> [35] \"ClrFacade.Tests.RefClasses.LevelThreeClass\"               #> [36] \"ClrFacade.Tests.RefClasses.LevelTwoClass\"                 #> [37] \"ClrFacade.ClrFacade+CallInstanceMethodDelegate\"           #> [38] \"ClrFacade.ClrFacade+CreateSexpWrapperDelegate\"            #> [39] \"ClrFacade.ClrFacade+CallStaticMethodDelegate\"             #> [40] \"ClrFacade.ClrFacade+CurrentObjectDelegate\"                #> [41] \"ClrFacade.ClrFacade+CreateInstanceDelegate\"               #> [42] \"ClrFacade.ClrFacade+GetObjectTypeNameDelegate\"            #> [43] \"ClrFacade.ClrFacade+LoadFromDelegate\"                     #> [44] \"ClrFacade.ClrFacade+FreeObjectDelegate\"                   #> [45] \"ClrFacade.RdotnetDataConverterTests+MemTestObjectRDotnet\""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/inspectArgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"Inspect one R object get information representation engine. function mostly useful R/rSharp developers. derived 'showArgs' example R extension manual","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/inspectArgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"","code":"inspectArgs(...)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/inspectArgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"... one R objects","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/inspectArgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"NULL. Information printed, returned.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/inspectArgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"","code":"inspectArgs(1, \"a\", 1:10) #> [1] '<unnamed>' R type double, SEXPTYPE=14 #> [1] '<unnamed>' length 1 #> [1] names of length 0 #> [2] '<unnamed>' R type character, SEXPTYPE=16 #> [2] '<unnamed>' length 1 #> [2] names of length 0 #> [3] '<unnamed>' R type integer, SEXPTYPE=13 #> [3] '<unnamed>' length 10 #> [3] names of length 0"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/isAssemblyLoaded.html","id":null,"dir":"Reference","previous_headings":"","what":"Is the assembly loaded? — isAssemblyLoaded","title":"Is the assembly loaded? — isAssemblyLoaded","text":"assembly loaded?","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/isAssemblyLoaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is the assembly loaded? — isAssemblyLoaded","text":"","code":"isAssemblyLoaded(assemblyName)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/isAssemblyLoaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is the assembly loaded? — isAssemblyLoaded","text":"assemblyName name assembly, e.g. 'ClrFacade'","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/isAssemblyLoaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is the assembly loaded? — isAssemblyLoaded","text":"TRUE assembly loaded, FALSE otherwise","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/isAssemblyLoaded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is the assembly loaded? — isAssemblyLoaded","text":"","code":"isAssemblyLoaded(\"ClrFacade\") #> [1] TRUE"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/loadAssembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads a .NET assembly. — loadAssembly","title":"Loads a .NET assembly. — loadAssembly","text":"Loads .NET assembly.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/loadAssembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads a .NET assembly. — loadAssembly","text":"","code":"loadAssembly(name)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/loadAssembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads a .NET assembly. — loadAssembly","text":"name character vector length one. can full file name assembly load, fully qualified assembly name, last resort partial name.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/loadAssembly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads a .NET assembly. — loadAssembly","text":"Name loaded assembly, successfull.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/loadAssembly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loads a .NET assembly. — loadAssembly","text":"Note loaded single application domain created rSharp, separate application domain.","code":""},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/loadAssembly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loads a .NET assembly. — loadAssembly","text":"","code":"if (FALSE) { # \\dontrun{ f <- file.path(\"SomeDirectory\", \"YourDotNetBinaryFile.dll\") f <- path.expand(f) stopifnot(file.exists(f)) loadAssembly(f) } # }"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newObjectFromName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new NetObject R6 object given the type name. — newObjectFromName","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"Create new NetObject R6 object given type name.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newObjectFromName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"","code":"newObjectFromName(typename, ..., R6objectClass = NetObject)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newObjectFromName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"typename type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. ... additional method arguments passed object constructor via call .External R6objectClass R6 class object created, defaults `NetObject`. Can used create custom R6 classes inherit `NetObject`.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newObjectFromName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"`NetObject` R6 object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newObjectFromName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) # object with a constructor that has parameters testObj <- newObjectFromName(testClassName, as.integer(123))"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newPointerFromName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new external pointer to a .NET object given the type name. — newPointerFromName","title":"Create a new external pointer to a .NET object given the type name. — newPointerFromName","text":"Create new external pointer .NET object given type name.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newPointerFromName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new external pointer to a .NET object given the type name. — newPointerFromName","text":"","code":"newPointerFromName(typename, ...)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newPointerFromName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new external pointer to a .NET object given the type name. — newPointerFromName","text":"typename type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. ... additional method arguments passed object constructor via call .External","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newPointerFromName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new external pointer to a .NET object given the type name. — newPointerFromName","text":"external pointer .NET object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/newPointerFromName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new external pointer to a .NET object given the type name. — newPointerFromName","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testPtr <- newPointerFromName(testClassName) # Now we can create a NetObject from the pointer testObj <- NetObject$new(testPtr)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/printTraceback.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints the last .NET exception — printTraceback","title":"Prints the last .NET exception — printTraceback","text":"roughly equivalent traceback function R.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/printTraceback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints the last .NET exception — printTraceback","text":"","code":"printTraceback()"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/printTraceback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints the last .NET exception — printTraceback","text":"","code":"if (FALSE) { # \\dontrun{ callStatic(   getRSharpSetting(\"testCasesTypeName\"), \"            ThrowException\",   10L ) # will be truncated by the Rf_error API printTraceback() # prints the full stack trace } # }"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rSharpSettingNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","title":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","text":"Names settings stored rSharpEnv Can used `getRSharpSetting()`","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rSharpSettingNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","text":"","code":"rSharpSettingNames"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rSharpSettingNames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","text":"object class character length 9.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rToDotNetType.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"Gets type .NET object resulting converting R object. function mostly documentation purposes, may use end users.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rToDotNetType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"","code":"rToDotNetType(x)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rToDotNetType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"x R object","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rToDotNetType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"list, columns including mode, type, class, length string corresponding .NET type.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/rToDotNetType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"","code":"rToDotNetType(1) #> $mode #> [1] \"numeric\" #>  #> $type #> [1] \"double\" #>  #> $class #> [1] \"numeric\" #>  #> $length #> [1] 1 #>  #> $clrType #> [1] \"System.Double\" #>"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setConvertAdvancedTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"Turn /conversion advanced data types R.NET. turn conversion classes dictionaries R lists, bidirectional may want see manipulate external pointers dictionaries circumstances.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setConvertAdvancedTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"","code":"setConvertAdvancedTypes(enable = TRUE)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setConvertAdvancedTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"enable true enable, otherwise disable","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setConvertAdvancedTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"","code":"library(rSharp) cTypename <- getRSharpSetting(\"testCasesTypeName\") callStatic(cTypename, \"CreateStringDictionary\") #> $a #> [1] \"A\" #>  #> $b #> [1] \"B\" #>  setConvertAdvancedTypes(FALSE) callStatic(cTypename, \"CreateStringDictionary\") #>  #> ── <NetObject> ── #>  #> Type: System.Collections.Generic.Dictionary`2[[System.String, #> System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, #> PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, #> Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] #>  #> ── Available Methods  #>   • `Add()` #>   • `Clear()` #>   • `ContainsKey()` #>   • `ContainsValue()` #>   • `EnsureCapacity()` #>   • `Equals()` #>   • `get_Comparer()` #>   • `get_Count()` #>   • `get_Item()` #>   • `get_Keys()` #>   • `get_Values()` #>   • `GetEnumerator()` #>   • `GetHashCode()` #>   • `GetObjectData()` #>   • `GetType()` #>   • `OnDeserialization()` #>   • `Remove()` #>   • `Remove()` #>   • `set_Item()` #>   • `ToString()` #>   • `TrimExcess()` #>   • `TrimExcess()` #>   • `TryAdd()` #>   • `TryGetValue()` #>  #> ── Available Properties  #>   • Comparer #>   • Count #>   • Item #>   • Keys #>   • Values"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the value of a field or property of an object or class — setStatic","title":"Sets the value of a field or property of an object or class — setStatic","text":"Sets value field property object class","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the value of a field or property of an object or class — setStatic","text":"","code":"setStatic(type, name, value, asInteger = FALSE)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the value of a field or property of an object or class — setStatic","text":"type Type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. name name field/property object value value set field asInteger Boolean whether convert value integer. Used cases .NET signature requires integer. Ignored `value` numeric.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/setStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the value of a field or property of an object or class — setStatic","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") setStatic(testClassName, \"StaticPropertyIntegerOne\", as.integer(42))"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/toStringNET.html","id":null,"dir":"Reference","previous_headings":"","what":"Calls the ToString method of an object — toStringNET","title":"Calls the ToString method of an object — toStringNET","text":"Calls ToString method object represented .NET. function help quickly test object equivalence R interpreter,  instance tricky topic date-time conversions","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/toStringNET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calls the ToString method of an object — toStringNET","text":"","code":"toStringNET(x)"},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/toStringNET.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calls the ToString method of an object — toStringNET","text":"x R object, converted .NET object call ToString","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/toStringNET.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calls the ToString method of an object — toStringNET","text":"string representation object .NET","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/reference/toStringNET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calls the ToString method of an object — toStringNET","text":"","code":"library(rSharp) dt <- as.POSIXct(\"2001-01-01 02:03:04\", tz = \"UTC\") toStringNET(dt) #> [1] \"1/1/2001 2:03:04 AM\""},{"path":[]},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-1-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"rSharp 1.1.2","text":"Enhanced object printing {cli} package readable output. Added {cli} package dependency improved formatting capabilities.","code":""},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"rSharp 1.1.1","text":"Solved bug prevented package installed Windows user R library path containing special characters. (#165)","code":""},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/news/index.html","id":"major-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"rSharp 1.1.0","text":"rSharp now compatible macOS (tested ARM)","code":""},{"path":[]},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"rSharp 1.0.1","text":"Fixed bug prevented rSharp installation user R library path containing special characters.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/news/index.html","id":"rsharp-100","dir":"Changelog","previous_headings":"","what":"rSharp 1.0.0","title":"rSharp 1.0.0","text":"First release rSharp package.","code":""},{"path":"http://www.open-systems-pharmacology.org/rSharp/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"rSharp 1.0.0","text":"github actions implementation windows Ubuntu R package builds. github actions C# binary builds windows Ubuntu.","code":""}]
